plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'java'
    id 'jacoco'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.3.0"
}


ext {
    java_version = "17" // 8 ~ 17
    project.version = "0.0.1-SNAPSHOT"
    project.group = "com.nkia.lucida.role"
    artifactId = "role"

    currentTime = new Date().getTime()
    currentDate = new Date(currentTime).format("yyyy-MM-dd HH:mm:ss")
}

sourceCompatibility = "${project.ext.java_version}"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {
        url "http://cims.nkia.net:9081/repository/maven-snapshots/"
        allowInsecureProtocol = true
    }
    maven {
        url "https://packages.confluent.io/maven"
    }
    maven {
        url "https://repo.spring.io/snapshot"
    }
    maven {
        url "https://repo.spring.io/milestone"
    }
    maven {
        url "https://repo.spring.io/release"
    }
}

dependencies {
    configurations.all {
        exclude group: "commons-logging", module: "commons-logging"
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "log4j", module: "log4j"
        exclude group: "org.apache.logging.log4j"

        resolutionStrategy.cacheChangingModulesFor 0, "seconds"
    }
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    implementation "org.springframework.boot:spring-boot-starter-logging"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation(platform("org.junit:junit-bom:5.8.2"))
    testRuntimeOnly("org.junit.platform:junit-platform-launcher") {
        because("Only needed to run tests in a version of IntelliJ IDEA that bundles older versions")
    }
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testRuntimeOnly("org.junit.vintage:junit-vintage-engine")
    //testcontainer 추가
    testImplementation 'org.testcontainers:junit-jupiter:1.17.6'
    testImplementation 'org.testcontainers:mongodb:1.17.6'
    testImplementation 'org.testcontainers:kafka:1.17.6'

    // kafka 연동을 위한 의존성 추가
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'
    // Avro plugin 사용을 위한 의존성 추가
    implementation "org.apache.avro:avro:1.11.0"
    // Avro Serializer 의존성 추가
    implementation 'io.confluent:kafka-avro-serializer:7.0.1'

    implementation 'com.nkia.lucida.common.telemetry:lucida-common-telemetry:0.1.9-SNAPSHOT'
    //tenant 분리 library
    implementation "com.nkia.lucida.common.mongodb:lucida-common-mongodb:0.1.4-SNAPSHOT"
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'
}

// Avro plugin 설정
avro {
    createSetters = false
    fieldVisibility = "PRIVATE"
}

jacoco {
    toolVersion = "0.8.7"
}

test {
    jvmArgs = [
            "-Dspring.profiles.active=test"
    ]
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }
    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            "**/config/*",
                            "**/controller/Exception*",
                            "**/role/*Application"
                    ] + Qdomains)
                })
        )
    }
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '**.QA'..'**.QZ') {
        Qdomains.add(qPattern + '*')
    }
    violationRules {
        rule {
            //추후 사용을 대비하여 설정 파일만 먼저 적어 둔다.
            enabled = true

            // 룰을 체크할 단위는 클래스 단위
            element = 'CLASS'
/*
            // 브랜치 커버리지를 최소한 90% 만족시켜야 합니다.
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            // 라인 커버리지를 최소한 80% 만족시켜야 합니다.
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
*/
            // 커버리지 체크를 제외할 클래스들이 있을 경우 설정
            excludes = [
                    "**.config.*",
                    "**.controller.Exception*",
                    "**.role.*Application"
            ] + Qdomains
        }
    }
}

bootJar {
    archiveFileName = "${project.ext.artifactId}-${project.version}.jar"
    manifest {
        attributes("Implementation-Title": project.ext.artifactId,
                "Implementation-Version": project.version,
                "Build-Time": currentDate)
    }
}

bootRun {
    jvmArgs = [
            "-Dspring.profiles.active=local"
    ]
    environment "SCHEMA_REGISTRY_URL", "http://192.168.20.181:8081"
    environment "KAFKA_CLUSTER_BOOTSTRAP", "192.168.20.181:9092"
    environment "MONGODB_URI", "mongodb://localhost:27017"
    environment "MONGODB_DATABASE", "shared"

}
